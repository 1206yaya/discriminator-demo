openapi: 3.0.0
info:
  version: 1.0.0
  title: OpenAPI Golang TypeScript Demo
  contact:
    name: Demo Team
  description: OpenAPI code generation demo with Go and TypeScript
servers:
  - url: 'http://localhost:3000/api'
tags:
  - name: Example
  - name: User
paths:
  /users:
    get:
      operationId: GetUsers
      tags:
        - User
      summary: ユーザー一覧の取得
      description: ユーザー一覧を取得します
      responses:
        '200':
          description: ユーザー一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      operationId: CreateUser
      tags:
        - User
      summary: ユーザーの作成
      description: 新しいユーザーを作成します
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: 作成されたユーザー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      operationId: GetUserByID
      tags:
        - User
      summary: ユーザーの取得
      description: IDを指定してユーザーを取得します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: ユーザー情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: ユーザーが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: UpdateUser
      tags:
        - User
      summary: ユーザーの更新
      description: ユーザー情報を更新します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 更新されたユーザー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: バリデーションエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: ユーザーが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      operationId: DeleteUser
      tags:
        - User
      summary: ユーザーの削除
      description: ユーザーを削除します
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: 削除完了
        '404':
          description: ユーザーが見つかりません
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /examples/hello:
    get:
      operationId: GetHello
      tags:
        - Example
      summary: Hello World
      description: Hello Worldを返すサンプルエンドポイント
      responses:
        '200':
          description: Hello World
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HelloResponse'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          format: int64
          description: ユーザーID
        name:
          type: string
          description: ユーザー名
        email:
          type: string
          format: email
          description: メールアドレス
        createdAt:
          type: string
          format: date-time
          description: 作成日時
        updatedAt:
          type: string
          format: date-time
          description: 更新日時
    CreateUserRequest:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: ユーザー名
        email:
          type: string
          format: email
          description: メールアドレス
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
          description: ユーザー名
        email:
          type: string
          format: email
          description: メールアドレス
    HelloResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: Hello World メッセージ
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: エラーメッセージ
        code:
          type: string
          description: エラーコード
