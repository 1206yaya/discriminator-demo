// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package oapi

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for GenderProfileFieldFieldType.
const (
	GenderProfileFieldFieldTypeGender GenderProfileFieldFieldType = "gender"
)

// Defines values for GenderProfileFieldValue.
const (
	GenderProfileFieldValueFemale GenderProfileFieldValue = "female"
	GenderProfileFieldValueMale   GenderProfileFieldValue = "male"
)

// Defines values for NumberProfileFieldFieldType.
const (
	NumberProfileFieldFieldTypeNumber NumberProfileFieldFieldType = "number"
)

// Defines values for TextProfileFieldFieldType.
const (
	TextProfileFieldFieldTypeText TextProfileFieldFieldType = "text"
)

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	// Email メールアドレス
	Email openapi_types.Email `json:"email"`

	// Name ユーザー名
	Name string `json:"name"`

	// ProfileFields ユーザープロフィール項目
	ProfileFields *[]ProfileField `json:"profileFields,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code エラーコード
	Code *string `json:"code,omitempty"`

	// Message エラーメッセージ
	Message string `json:"message"`
}

// GenderProfileField defines model for GenderProfileField.
type GenderProfileField struct {
	// FieldType フィールドタイプ
	FieldType GenderProfileFieldFieldType `json:"fieldType"`

	// Name フィールド名
	Name string `json:"name"`

	// Value 性別
	Value GenderProfileFieldValue `json:"value"`
}

// GenderProfileFieldFieldType フィールドタイプ
type GenderProfileFieldFieldType string

// GenderProfileFieldValue 性別
type GenderProfileFieldValue string

// HelloResponse defines model for HelloResponse.
type HelloResponse struct {
	// Message Hello World メッセージ
	Message string `json:"message"`
}

// NumberProfileField defines model for NumberProfileField.
type NumberProfileField struct {
	// FieldType フィールドタイプ
	FieldType NumberProfileFieldFieldType `json:"fieldType"`

	// Name フィールド名
	Name string `json:"name"`

	// Value 数値
	Value float32 `json:"value"`
}

// NumberProfileFieldFieldType フィールドタイプ
type NumberProfileFieldFieldType string

// ProfileField defines model for ProfileField.
type ProfileField struct {
	union json.RawMessage
}

// TextProfileField defines model for TextProfileField.
type TextProfileField struct {
	// FieldType フィールドタイプ
	FieldType TextProfileFieldFieldType `json:"fieldType"`

	// Name フィールド名
	Name string `json:"name"`

	// Value テキスト値
	Value string `json:"value"`
}

// TextProfileFieldFieldType フィールドタイプ
type TextProfileFieldFieldType string

// UpdateUserRequest defines model for UpdateUserRequest.
type UpdateUserRequest struct {
	// Email メールアドレス
	Email *openapi_types.Email `json:"email,omitempty"`

	// Name ユーザー名
	Name *string `json:"name,omitempty"`

	// ProfileFields ユーザープロフィール項目
	ProfileFields *[]ProfileField `json:"profileFields,omitempty"`
}

// User defines model for User.
type User struct {
	// CreatedAt 作成日時
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Email メールアドレス
	Email openapi_types.Email `json:"email"`

	// Id ユーザーID
	Id int64 `json:"id"`

	// Name ユーザー名
	Name string `json:"name"`

	// ProfileFields ユーザープロフィール項目
	ProfileFields *[]ProfileField `json:"profileFields,omitempty"`

	// UpdatedAt 更新日時
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = CreateUserRequest

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = UpdateUserRequest

// AsTextProfileField returns the union data inside the ProfileField as a TextProfileField
func (t ProfileField) AsTextProfileField() (TextProfileField, error) {
	var body TextProfileField
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTextProfileField overwrites any union data inside the ProfileField as the provided TextProfileField
func (t *ProfileField) FromTextProfileField(v TextProfileField) error {
	v.FieldType = "text"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTextProfileField performs a merge with any union data inside the ProfileField, using the provided TextProfileField
func (t *ProfileField) MergeTextProfileField(v TextProfileField) error {
	v.FieldType = "text"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsNumberProfileField returns the union data inside the ProfileField as a NumberProfileField
func (t ProfileField) AsNumberProfileField() (NumberProfileField, error) {
	var body NumberProfileField
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromNumberProfileField overwrites any union data inside the ProfileField as the provided NumberProfileField
func (t *ProfileField) FromNumberProfileField(v NumberProfileField) error {
	v.FieldType = "number"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeNumberProfileField performs a merge with any union data inside the ProfileField, using the provided NumberProfileField
func (t *ProfileField) MergeNumberProfileField(v NumberProfileField) error {
	v.FieldType = "number"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsGenderProfileField returns the union data inside the ProfileField as a GenderProfileField
func (t ProfileField) AsGenderProfileField() (GenderProfileField, error) {
	var body GenderProfileField
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGenderProfileField overwrites any union data inside the ProfileField as the provided GenderProfileField
func (t *ProfileField) FromGenderProfileField(v GenderProfileField) error {
	v.FieldType = "gender"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGenderProfileField performs a merge with any union data inside the ProfileField, using the provided GenderProfileField
func (t *ProfileField) MergeGenderProfileField(v GenderProfileField) error {
	v.FieldType = "gender"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProfileField) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"fieldType"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ProfileField) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "gender":
		return t.AsGenderProfileField()
	case "number":
		return t.AsNumberProfileField()
	case "text":
		return t.AsTextProfileField()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ProfileField) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProfileField) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Hello World
	// (GET /examples/hello)
	GetHello(w http.ResponseWriter, r *http.Request)
	// ユーザー一覧の取得
	// (GET /users)
	GetUsers(w http.ResponseWriter, r *http.Request)
	// ユーザーの作成
	// (POST /users)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// ユーザーの削除
	// (DELETE /users/{id})
	DeleteUser(w http.ResponseWriter, r *http.Request, id int64)
	// ユーザーの取得
	// (GET /users/{id})
	GetUserByID(w http.ResponseWriter, r *http.Request, id int64)
	// ユーザーの更新
	// (PUT /users/{id})
	UpdateUser(w http.ResponseWriter, r *http.Request, id int64)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Hello World
// (GET /examples/hello)
func (_ Unimplemented) GetHello(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ユーザー一覧の取得
// (GET /users)
func (_ Unimplemented) GetUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ユーザーの作成
// (POST /users)
func (_ Unimplemented) CreateUser(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ユーザーの削除
// (DELETE /users/{id})
func (_ Unimplemented) DeleteUser(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ユーザーの取得
// (GET /users/{id})
func (_ Unimplemented) GetUserByID(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ユーザーの更新
// (PUT /users/{id})
func (_ Unimplemented) UpdateUser(w http.ResponseWriter, r *http.Request, id int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetHello operation middleware
func (siw *ServerInterfaceWrapper) GetHello(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHello(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsers operation middleware
func (siw *ServerInterfaceWrapper) GetUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserByID operation middleware
func (siw *ServerInterfaceWrapper) GetUserByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByID(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/examples/hello", wrapper.GetHello)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users", wrapper.GetUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/users", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/users/{id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/users/{id}", wrapper.GetUserByID)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/users/{id}", wrapper.UpdateUser)
	})

	return r
}
