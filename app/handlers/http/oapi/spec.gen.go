// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xX3W4bRRR+FWvgcqldGrjYu5aUkJu2Kom4iHwx9R7bU+1fZ8clVrRSvEvbpA0iCiRR",
	"CIgCaQKURkHhp4XQPszEJn0LNDPeeO3dtQN1QoRyt9rd8/d935xzZgaVHMt1bLCZh/QZ5JWqYGH5+A4F",
	"zGDSA3odbtXAY+KlSx0XKCMgfwELE1M8GOCVKHEZcWykIx5+zcM9Hj7mwTc8nOfhjzx4hjRUdqiFGdLb",
	"dhpidReQjjxGiV1BvoZsbEGav03hL/iVh3vNxY/TDF3qlIkJ7xIwDa+/Bx6u8vAJD5d58K1K8+XDO3+t",
	"byMNEQaWtH6dQhnp6LV8B518G5r8tVgoEbqdC6YU15Hva4jCrRqhYCB9ShWktQsuHv7s3LgJJSasL1Pq",
	"0CSyJcdIAyL4joffy0p2ZerzaVhY4Hm40tdcEBTy4A/p6mnSSU8Vkce0AsbANoB2gZKopixeT0jLJDMd",
	"HoRWghc82ODhqgDNrlkiekVGiAUfrJcunxmSuY3NWopxa3arOfcoFt7CpqCwDPKhOAirTq1axL6KlAbe",
	"e2CaznXwXMf2IIlbJpPSLveBQ00jN0wyr9SsG8dLpi0jnBiZyzvN2Y2OQTv6K3HWi45BRESL2Jipk2xh",
	"1xVp6TORdDM6ScrR0aIUM0xSCNIQg2mWZTAB06y3Y7X5rF+RgMeq9zXk2HC1jPSp/j0wxWt/g5S8B5mk",
	"oOMXfQ0lYg9ZoRLNE9InD+/y4AkPnvFwrkuow2guk65xNsD/zQBPIulB2oyWC5JxkSXT3f/zi9bcYmv1",
	"UWstiOMmCHmDEUlcAoKhk0GM/kCOj8bdEJu9PdJxQ2wGFdEr/w+kaqgmD0MqWa31n1srO/+IrJ5jSYzO",
	"ecxa9YQNscuO2u5shksyFYUtGgXLyU0AtkSu3elddcG+eG08J1bCXAVsoFh8yRnC5EPCqrkxJ4dtIyf6",
	"wvvSUCRMmAkx6zHHxHYl9k9OhBT9A6inAp0/VzhXkDPABRu7BOnognylIRezqqQgD9PYck3w8lWxgqgZ",
	"x/ouKDxYOnjxGW+s8eAXHu5Koh/LVXRXyvlL2YF3eTiHZGhV3riBdDQGTDpCAm61JMks3iwUIhjBltGx",
	"65qkJC3zNz2RQnSXGSSc7hVM0pRZiiTeq1kWpvWeLxpiuOIJMVxWCKGi+Dlf84B6mTDFT8D+09mDzS0e",
	"LDU/WWk+X+WNVd54zhtraahMSq+viMqRzpVsfckmmUApWYmwemuIRKmbUlpooas9Hi7KBNpXnB6qUoBu",
	"bCugY9TJYsWO4TpeWqNY2ZGsfNTVuIIl1e2zCevcpJHqG+CxS45RHxo0yau6392iGK2Bn5DL+aEloFSS",
	"pCZCZpkHC7zxVRw3IY+RE5GHEMYPPLwnQ//Gwy3RbTo6OaUq5Y1thV5Sn4d9JT9DDF/p1AQ2YEaLzjJ/",
	"/+XaRrZQR6WbtlBdTLEFTLavqRlEhD8xB6JRp6ux1y0yLQbTwM3CLyYkOZKsQSXd3F7Y//2uEs3ISYgm",
	"zsTCweYD3tjgjQc8uC+xW+fBp6dZOgq0tNaWOofGR3mw1Fq419z+XKpjs1c4RxtJl+pypfxPlFM49mYW",
	"x6QV3mk+/OlMjkeVY/akrQ1YixTSQp5yTc/WYOe6e4ISHP4sT97ajzTLj1/+Ef6ne5afHccjHEdFZcpi",
	"IYyA3o6OTY2aSEdVxlw9nzedEjarjsf0C4VCIS8uiOIMtF0c3mSj64+vHb5Siir6fwcAAP//Qh6u+20a",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
